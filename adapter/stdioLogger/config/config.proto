// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package adapter.stdioLogger.config;

option go_package = "config";

message Params {

    // Stream is used to select between different logs output sinks.
    // STDERR is the default Stream.
    enum Stream {

        // STDERR refers to os.Stderr.
        STDERR = 0;

        // STDOUT refers to os.Stdout.
        STDOUT = 1;
    }

    // Selects which standard stream to write to for log entries.
    Stream log_stream = 1;

    // Provides a way to identify a collection of related logs within the
    // single stream. If no log_name is provided, a default value of
    // "istio_log" will be used.
    string log_name = 2;

    // PayloadFormat details the currently supported logging payload formats.
    // TEXT is the default payload format.
    enum PayloadFormat {

        // Indicates a payload format of raw text.
        TEXT = 0;

        // Indicates a structured payload (JSON object).
        STRUCTURED = 1;
    }

    // The name of the attribute to treat as the payload of the logs message.
    // If payload_attribute is not specified, there will be no payload specified
    // in the log entry written. All provided attributes will be written out
    // as logging metadata.
    string payload_attribute = 3;

    // Format of the value of the payload attribute.
    PayloadFormat payload_format = 4;

    // The name of the attribute that will be used to derive log severity.
    // If this attribute is not found in the set of attributes passed to this
    // implementation, a default severity of INFO will be used.
    string severity_attribute = 5;

    // The name of the attribute that will be used to derive the timestamp
    // for the corresponding log enty. If this attribute is not specified, the
    // value from time.Now() will be used as the timestamp for the log.
    string timestamp_attribute = 6;

    // The format of the value of the timestamp_attribute. It is expected that
    // this format string will follow the conventions of golang's time.Time
    // package and use the reference date as defined in:
    // https://golang.org/pkg/time/#pkg-constants.
    //
    // Example: "2006-01-02T15:04:05Z07:00"
    string timestamp_format = 7;
}
