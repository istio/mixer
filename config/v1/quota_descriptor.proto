// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package config.v1;

import "label_descriptor.proto";

// Configuration state for a particular quota.
//
// Quotas are similar to metrics, except that they are mutated through method
// calls and there are limits on the allowed values.
// The descriptor below lets you define a quota and indicate the maximum
// amount values of this quota are allowed to hold. Values are adjusted
// using the UpdateQuota method.
//
// A given quota is described by a set of labels. These labels represent the
// different dimensions to associate with the quota. A given quota holds a
// unique value for potentially any combination of these labels.
//
// The quota kind controls the general behavior of the quota. A normal
// quota is only adjusted through the UpdateQuota method.
// An auto-reset quota's values are reset to 0 at a fixed interval, which
// is useful for rate-style limits.
//
// Here's an example quota descriptor defined in a YAML configuration
// file:
//
//    quotas:
//    - name: max_request_count_per_second
//      max_amount: 100
//      labels:
//      - key: caller_id
//      - key: datacenter_id
//
// This descriptor means that two labels are needed to specify a given quota
// value. In this particular case, this means a quota limit of 100 is being applied
// independently to any combination of caller_id and datacenter_id.
message QuotaDescriptor {
  // The name of this descriptor.
  string name = 1;

  // The set of labels that are necessary to describe a specific value cell
  // for a quota of this type.
  repeated LabelDescriptor labels = 2;

  // The unit in which the quota's values are reported. The
  // supported units are a subset of [The Unified Code for Units of
  // Measure](http://unitsofmeasure.org/ucum.html) standard:
  //
  // **Basic units (UNIT)**
  //
  // * `bit`   bit
  // * `By`    byte
  // * `s`     second
  // * `min`   minute
  // * `h`     hour
  // * `d`     day
  //
  // **Prefixes (PREFIX)**
  //
  // * `k`     kilo    (10**3)
  // * `M`     mega    (10**6)
  // * `G`     giga    (10**9)
  // * `T`     tera    (10**12)
  // * `P`     peta    (10**15)
  // * `E`     exa     (10**18)
  // * `Z`     zetta   (10**21)
  // * `Y`     yotta   (10**24)
  // * `m`     milli   (10**-3)
  // * `u`     micro   (10**-6)
  // * `n`     nano    (10**-9)
  // * `p`     pico    (10**-12)
  // * `f`     femto   (10**-15)
  // * `a`     atto    (10**-18)
  // * `z`     zepto   (10**-21)
  // * `y`     yocto   (10**-24)
  // * `Ki`    kibi    (2**10)
  // * `Mi`    mebi    (2**20)
  // * `Gi`    gibi    (2**30)
  // * `Ti`    tebi    (2**40)
  //
  // **Grammar**
  //
  // The grammar includes the dimensionless unit `1`, such as `1/s`.
  //
  // The grammar also includes these connectors:
  //
  // * `/`    division (as an infix operator, e.g. `1/s`).
  // * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
  //
  // The grammar for a unit is as follows:
  //
  //     Expression = Component { "." Component } { "/" Component } ;
  //
  //     Component = [ PREFIX ] UNIT [ Annotation ]
  //               | Annotation
  //               | "1"
  //               ;
  //
  //     Annotation = "{" NAME "}" ;
  //
  // Notes:
  //
  // * `Annotation` is just a comment if it follows a `UNIT` and is
  //    equivalent to `1` if it is used alone. For examples,
  //    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
  // * `NAME` is a sequence of non-blank printable ASCII characters not
  //    containing '{' or '}'.
  //
  string unit = 3;

  // Optional. A detailed description of the quota, which can be used in documentation.
  string description = 4;

  // A concise name for the quota, which can be displayed in user interfaces.
  // Use sentence case without an ending period, for example "Request count".
  string display_name = 5;

  // The imposed maximum amount for values of this quota.
  int64 max_amount = 6;

  // The type of quota behavior expected, defaults to NORMAL if not specified
  QuotaKind kind = 7;

  // Whether the quota's current value is tracked precisely or not.
  // Precisely tracked quotas only allow a relatively modest level of
  // scaling, whereas imprecise quotas can support a nearly unbounded
  // level of scaling at the cost of potentially having small
  // inaccuracies
  bool precise = 8;

  enum QuotaKind {
    // Quota values are always explicitly manipulated via the UpdateQuota method.
    NORMAL = 0;

    // Quota limit expresses a maximum amount over a rolling time interval
    RATE_PER_MINUTE = 1;
  }
}
