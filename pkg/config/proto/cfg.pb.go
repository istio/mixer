// POST PROCESSED USING by build_cfg.sh
// 84100219 5669 mixer/v1/config/cfg.proto
// Code generated by protoc-gen-go.
// source: mixer/v1/config/cfg.proto
// DO NOT EDIT!

/*
Package istio_mixer_v1_config is a generated protocol buffer package.

It is generated from these files:
	mixer/v1/config/cfg.proto

It has these top-level messages:
	ServiceConfig
	AspectRule
	Aspect
	Adapter
	GlobalConfig
	ClientConfig
	Uri
	IpAddress
	DnsName
	EmailAddress
*/
package istio_mixer_v1_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import istio_mixer_v1_config_descriptor1 "istio.io/api/mixer/v1/config/descriptor"
import istio_mixer_v1_config_descriptor3 "istio.io/api/mixer/v1/config/descriptor"
import istio_mixer_v1_config_descriptor4 "istio.io/api/mixer/v1/config/descriptor"
import istio_mixer_v1_config_descriptor5 "istio.io/api/mixer/v1/config/descriptor"
import istio_mixer_v1_config_descriptor6 "istio.io/api/mixer/v1/config/descriptor"
import istio_mixer_v1_config_descriptor7 "istio.io/api/mixer/v1/config/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Configures a set of services
// following example configures metrics collection and ratelimit for
// all services
// # service config
// subject: "namespace:ns1"
// revision: "1011"
// rules:
// - selector: target_name == "*"
//  aspects:
//  - kind: metrics
//    params:
//      metrics:   # defines metric collection across the board.
//      - name: response_time_by_status_code
//        value: metric.response_time     # certain attributes are metrics
//        metric_kind: DELTA
//        labels:
//        - key: response.status_code
//  - kind: ratelimiter
//    params:
//      limits:  # imposes 2 limits, 100/s per source and destination
//      - limit: "100/s"
//        labels:
//          - key: src.service_id
//          - key: target.service_id
//       - limit: "1000/s"  # every destination service gets 1000/s
//        labels:
//          - key: target.service_id
type ServiceConfig struct {
	// subject is unique for a config type
	// 2 config with the same subject will overwrite each other
	Subject string `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	// revision of this config. This is assigned by the server
	Revision string        `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	Rules    []*AspectRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (m *ServiceConfig) Reset()                    { *m = ServiceConfig{} }
func (m *ServiceConfig) String() string            { return proto.CompactTextString(m) }
func (*ServiceConfig) ProtoMessage()               {}
func (*ServiceConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceConfig) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ServiceConfig) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *ServiceConfig) GetRules() []*AspectRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// AspectRules are intent based
type AspectRule struct {
	// selector is an attributes based predicate.
	// attr1 == "20" && attr2 == "30"
	Selector string `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	// The following aspects apply when the selector predicate evaluates to True
	Aspects []*Aspect `protobuf:"bytes,2,rep,name=aspects" json:"aspects,omitempty"`
	// Nested aspect Rule is evaluated if selector predicate evaluates to True
	Rules []*AspectRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (m *AspectRule) Reset()                    { *m = AspectRule{} }
func (m *AspectRule) String() string            { return proto.CompactTextString(m) }
func (*AspectRule) ProtoMessage()               {}
func (*AspectRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AspectRule) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *AspectRule) GetAspects() []*Aspect {
	if m != nil {
		return m.Aspects
	}
	return nil
}

func (m *AspectRule) GetRules() []*AspectRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Aspect is intent based. It specifies the intent "kind"
// following example specifies that the user would like to collect
// response_time with 3 labels (src_consumer_id, target_response_status_code,
// target_service_name)
//
// The Input section tells if target_service_name is not available it can be
// computed using the given expression
//
//      kind: istio/metrics
//      params:
//        metrics:
//        - name: response_time     # What to call this metric outbound.
//          value: metric_response_time  # from wellknown vocabulary
//          metric_kind: DELTA
//          labels:
//          - key: src_consumer_id
//          - key: target_response_status_code
//          - key: target_service_name
//      Inputs:
//           Attr.target_service_name: target_service_name || target_service_id
type Aspect struct {
	Kind    string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Adapter string `protobuf:"bytes,2,opt,name=adapter" json:"adapter,omitempty"`
	// maps from isio Attribute space to aspect.Input proto defined
	// by the aspect
	Inputs map[string]string `protobuf:"bytes,3,rep,name=inputs" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Struct representation of a proto defined by the aspect
	Params interface{} `protobuf:"bytes,4,opt,name=params" json:"params,omitempty"`
}

func (m *Aspect) Reset()                    { *m = Aspect{} }
func (m *Aspect) String() string            { return proto.CompactTextString(m) }
func (*Aspect) ProtoMessage()               {}
func (*Aspect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Aspect) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Aspect) GetAdapter() string {
	if m != nil {
		return m.Adapter
	}
	return ""
}

func (m *Aspect) GetInputs() map[string]string {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Aspect) GetParams() interface{} {
	if m != nil {
		return m.Params
	}
	return nil
}

// Adapter config defines specifics of adapter implementations
// We define an adapter that provides "metrics" aspect
// Kind: istio/metrics
// Name: metrics-statsd
// Impl: “istio.io/adapters/statsd”
// Args:
//    Host: statd.svc.cluster
//    Port: 8125
type Adapter struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Kind string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Impl string `protobuf:"bytes,3,opt,name=impl" json:"impl,omitempty"`
	// Struct representation of a proto defined by the implementation
	Params interface{} `protobuf:"bytes,4,opt,name=params" json:"params,omitempty"`
}

func (m *Adapter) Reset()                    { *m = Adapter{} }
func (m *Adapter) String() string            { return proto.CompactTextString(m) }
func (*Adapter) ProtoMessage()               {}
func (*Adapter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Adapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Adapter) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Adapter) GetImpl() string {
	if m != nil {
		return m.Impl
	}
	return ""
}

func (m *Adapter) GetParams() interface{} {
	if m != nil {
		return m.Params
	}
	return nil
}

// GlobalConfig defines configuration elements that are available
// for the rest of the config
// It is used to configure adapters and make them available in AspectRules
type GlobalConfig struct {
	Revision string     `protobuf:"bytes,1,opt,name=revision" json:"revision,omitempty"`
	Adapters []*Adapter `protobuf:"bytes,2,rep,name=adapters" json:"adapters,omitempty"`
	// TODO: remove these in https://github.com/istio/api/pull/45
	Attributes         []*istio_mixer_v1_config_descriptor1.AttributeDescriptor         `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty"`
	Logs               []*istio_mixer_v1_config_descriptor3.LogEntryDescriptor          `protobuf:"bytes,4,rep,name=logs" json:"logs,omitempty"`
	Metrics            []*istio_mixer_v1_config_descriptor4.MetricDescriptor            `protobuf:"bytes,5,rep,name=metrics" json:"metrics,omitempty"`
	MonitoredResources []*istio_mixer_v1_config_descriptor5.MonitoredResourceDescriptor `protobuf:"bytes,6,rep,name=monitored_resources,json=monitoredResources" json:"monitored_resources,omitempty"`
	Principals         []*istio_mixer_v1_config_descriptor6.PrincipalDescriptor         `protobuf:"bytes,7,rep,name=principals" json:"principals,omitempty"`
	Quotas             []*istio_mixer_v1_config_descriptor7.QuotaDescriptor             `protobuf:"bytes,8,rep,name=quotas" json:"quotas,omitempty"`
}

func (m *GlobalConfig) Reset()                    { *m = GlobalConfig{} }
func (m *GlobalConfig) String() string            { return proto.CompactTextString(m) }
func (*GlobalConfig) ProtoMessage()               {}
func (*GlobalConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GlobalConfig) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GlobalConfig) GetAdapters() []*Adapter {
	if m != nil {
		return m.Adapters
	}
	return nil
}

func (m *GlobalConfig) GetAttributes() []*istio_mixer_v1_config_descriptor1.AttributeDescriptor {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *GlobalConfig) GetLogs() []*istio_mixer_v1_config_descriptor3.LogEntryDescriptor {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *GlobalConfig) GetMetrics() []*istio_mixer_v1_config_descriptor4.MetricDescriptor {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *GlobalConfig) GetMonitoredResources() []*istio_mixer_v1_config_descriptor5.MonitoredResourceDescriptor {
	if m != nil {
		return m.MonitoredResources
	}
	return nil
}

func (m *GlobalConfig) GetPrincipals() []*istio_mixer_v1_config_descriptor6.PrincipalDescriptor {
	if m != nil {
		return m.Principals
	}
	return nil
}

func (m *GlobalConfig) GetQuotas() []*istio_mixer_v1_config_descriptor7.QuotaDescriptor {
	if m != nil {
		return m.Quotas
	}
	return nil
}

// ClientConfig defines configuration from a client perspective.
// ServiceA can define rules about what happens when it is acting as client
// to other services
type ClientConfig struct {
	Subject  string        `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	Revision string        `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	Rules    []*AspectRule `protobuf:"bytes,3,rep,name=rules" json:"rules,omitempty"`
}

func (m *ClientConfig) Reset()                    { *m = ClientConfig{} }
func (m *ClientConfig) String() string            { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()               {}
func (*ClientConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClientConfig) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ClientConfig) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *ClientConfig) GetRules() []*AspectRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// Uri represents a properly formed URI.
type Uri struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Uri) Reset()                    { *m = Uri{} }
func (m *Uri) String() string            { return proto.CompactTextString(m) }
func (*Uri) ProtoMessage()               {}
func (*Uri) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Uri) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IpAddress holds an IPv4 or IPv6 address.
type IpAddress struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *IpAddress) Reset()                    { *m = IpAddress{} }
func (m *IpAddress) String() string            { return proto.CompactTextString(m) }
func (*IpAddress) ProtoMessage()               {}
func (*IpAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IpAddress) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// DnsName holds a valid domain name.
type DnsName struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *DnsName) Reset()                    { *m = DnsName{} }
func (m *DnsName) String() string            { return proto.CompactTextString(m) }
func (*DnsName) ProtoMessage()               {}
func (*DnsName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DnsName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// EmailAddress holds a properly formatted email address.
type EmailAddress struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *EmailAddress) Reset()                    { *m = EmailAddress{} }
func (m *EmailAddress) String() string            { return proto.CompactTextString(m) }
func (*EmailAddress) ProtoMessage()               {}
func (*EmailAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EmailAddress) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceConfig)(nil), "istio.mixer.v1.config.ServiceConfig")
	proto.RegisterType((*AspectRule)(nil), "istio.mixer.v1.config.AspectRule")
	proto.RegisterType((*Aspect)(nil), "istio.mixer.v1.config.Aspect")
	proto.RegisterType((*Adapter)(nil), "istio.mixer.v1.config.Adapter")
	proto.RegisterType((*GlobalConfig)(nil), "istio.mixer.v1.config.GlobalConfig")
	proto.RegisterType((*ClientConfig)(nil), "istio.mixer.v1.config.ClientConfig")
	proto.RegisterType((*Uri)(nil), "istio.mixer.v1.config.Uri")
	proto.RegisterType((*IpAddress)(nil), "istio.mixer.v1.config.IpAddress")
	proto.RegisterType((*DnsName)(nil), "istio.mixer.v1.config.DnsName")
	proto.RegisterType((*EmailAddress)(nil), "istio.mixer.v1.config.EmailAddress")
}

func init() { proto.RegisterFile("mixer/v1/config/cfg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0xb6, 0x6b, 0xb7, 0xb3, 0x22, 0x21, 0x03, 0x22, 0x94, 0x7f, 0x5b, 0xc5, 0xc5,
	0xb8, 0x49, 0xd4, 0xc2, 0x34, 0x98, 0x04, 0x52, 0xb5, 0x4d, 0x30, 0x69, 0x20, 0xc8, 0xb4, 0xeb,
	0xc9, 0x4d, 0xbc, 0xc8, 0xcc, 0x89, 0x83, 0xed, 0x44, 0xec, 0x02, 0x1e, 0x84, 0xf7, 0x43, 0xbc,
	0x06, 0x8a, 0x63, 0xa7, 0x61, 0xdd, 0xba, 0x8d, 0x1b, 0xee, 0x62, 0xe7, 0xfb, 0x7e, 0xe7, 0xf8,
	0xd8, 0xe7, 0xc0, 0x83, 0x84, 0x7e, 0x23, 0xc2, 0x2f, 0x46, 0x7e, 0xc8, 0xd3, 0x13, 0x1a, 0xfb,
	0xe1, 0x49, 0xec, 0x65, 0x82, 0x2b, 0x8e, 0xee, 0x51, 0xa9, 0x28, 0xf7, 0xb4, 0xc0, 0x2b, 0x46,
	0x5e, 0x25, 0x18, 0x3c, 0x8a, 0x39, 0x8f, 0x19, 0xf1, 0xb5, 0x68, 0x9a, 0x9f, 0xf8, 0x52, 0x89,
	0x3c, 0x54, 0x95, 0x69, 0xb0, 0x79, 0x9e, 0x17, 0x11, 0x19, 0x0a, 0x9a, 0x29, 0x2e, 0x7c, 0xac,
	0x94, 0xa0, 0xd3, 0x5c, 0x91, 0xe3, 0xd9, 0xe6, 0x35, 0x6c, 0x8c, 0xc7, 0xc7, 0x24, 0x55, 0xe2,
	0x6c, 0xde, 0x36, 0x5e, 0x60, 0x4b, 0x88, 0x12, 0x34, 0x9c, 0xf7, 0xbc, 0x5d, 0xe4, 0xe1, 0x29,
	0x55, 0x5c, 0x90, 0xe8, 0x58, 0x10, 0xc9, 0x73, 0x11, 0xde, 0x30, 0xd5, 0x4c, 0xd0, 0x34, 0xa4,
	0x19, 0x66, 0xf3, 0xb6, 0xd1, 0x02, 0xdb, 0xd7, 0x9c, 0x2b, 0x3c, 0x67, 0x19, 0xfe, 0x80, 0x5b,
	0x87, 0x44, 0x14, 0x34, 0x24, 0x3b, 0xda, 0x82, 0x5c, 0xe8, 0xc9, 0x7c, 0xfa, 0x85, 0x84, 0xca,
	0x75, 0xd6, 0x9c, 0x8d, 0x95, 0xc0, 0x2e, 0xd1, 0x00, 0x96, 0x05, 0x29, 0xa8, 0xa4, 0x3c, 0x75,
	0x5b, 0xfa, 0x57, 0xbd, 0x46, 0x5b, 0xb0, 0x24, 0x72, 0x46, 0xa4, 0xdb, 0x5e, 0x6b, 0x6f, 0xac,
	0x8e, 0xd7, 0xbd, 0x0b, 0xef, 0xd5, 0x9b, 0xc8, 0x8c, 0x84, 0x2a, 0xc8, 0x19, 0x09, 0x2a, 0xfd,
	0xf0, 0xa7, 0x03, 0x30, 0xdb, 0x2d, 0x63, 0x48, 0xc2, 0x48, 0xa8, 0xb8, 0x30, 0xe1, 0xeb, 0x35,
	0xda, 0x82, 0x1e, 0xd6, 0x4a, 0xe9, 0xb6, 0x74, 0x94, 0xc7, 0x8b, 0xa3, 0x58, 0xf5, 0xbf, 0x27,
	0xf7, 0xcb, 0x81, 0x6e, 0xb5, 0x8b, 0x10, 0x74, 0x4e, 0x69, 0x1a, 0x99, 0xa4, 0xf4, 0x77, 0x59,
	0x2a, 0x1c, 0xe1, 0x4c, 0x11, 0x61, 0xea, 0x61, 0x97, 0x68, 0x02, 0x5d, 0x9a, 0x66, 0xb9, 0xb2,
	0x21, 0x9f, 0x2f, 0x0c, 0xe9, 0xed, 0x6b, 0xed, 0x5e, 0xf9, 0xfe, 0x02, 0x63, 0x44, 0x3e, 0x74,
	0x33, 0x2c, 0x70, 0x22, 0xdd, 0xce, 0x9a, 0xb3, 0xb1, 0x3a, 0xbe, 0xef, 0x55, 0x3d, 0xe1, 0xd9,
	0x9e, 0xf0, 0x0e, 0x75, 0x4f, 0x04, 0x46, 0x36, 0x78, 0x0d, 0xab, 0x0d, 0x0e, 0xba, 0x0d, 0xed,
	0x53, 0x72, 0x66, 0xf2, 0x2d, 0x3f, 0xd1, 0x5d, 0x58, 0x2a, 0x30, 0xcb, 0x89, 0x49, 0xb6, 0x5a,
	0x6c, 0xb7, 0x5e, 0x39, 0xc3, 0x02, 0x7a, 0x13, 0x93, 0x39, 0x82, 0x4e, 0x8a, 0x13, 0x62, 0xcf,
	0x59, 0x7e, 0xd7, 0x67, 0x6f, 0x35, 0xce, 0x8e, 0xa0, 0x43, 0x93, 0x8c, 0xb9, 0xed, 0x6a, 0xaf,
	0xfc, 0xbe, 0x71, 0xca, 0xc3, 0xdf, 0x1d, 0xe8, 0xbf, 0x63, 0x7c, 0x8a, 0x99, 0x79, 0x7c, 0xcd,
	0x27, 0xe6, 0x9c, 0x7b, 0x62, 0xdb, 0xb0, 0x6c, 0xca, 0x6b, 0xef, 0xff, 0xc9, 0x65, 0x55, 0xad,
	0x64, 0x41, 0xad, 0x47, 0x47, 0x00, 0xf5, 0x60, 0xb0, 0x77, 0xb2, 0x79, 0x89, 0xbb, 0xd1, 0x22,
	0x13, 0xeb, 0xd9, 0xad, 0xf7, 0x82, 0x06, 0x08, 0xbd, 0x87, 0x0e, 0xe3, 0x71, 0x79, 0xdc, 0x12,
	0xf8, 0xf2, 0x6a, 0xe0, 0x01, 0x8f, 0xf5, 0xed, 0x34, 0x78, 0x9a, 0x80, 0x0e, 0xa0, 0x57, 0xcd,
	0x12, 0xe9, 0x2e, 0x69, 0xd8, 0xf8, 0x6a, 0xd8, 0x07, 0x6d, 0x68, 0xa0, 0x2c, 0x02, 0xa5, 0x70,
	0x67, 0x7e, 0xca, 0x48, 0xb7, 0xab, 0xc9, 0x6f, 0xae, 0x41, 0xb6, 0xe6, 0xc0, 0x78, 0x1b, 0x41,
	0x50, 0x72, 0xfe, 0xa7, 0x2e, 0x6f, 0x3d, 0x95, 0xa4, 0xdb, 0xbb, 0x6e, 0x79, 0x3f, 0x59, 0x4f,
	0xb3, 0xbc, 0x33, 0x10, 0xda, 0x87, 0xae, 0x9e, 0x5a, 0xd2, 0x5d, 0xd6, 0xc8, 0xd1, 0xd5, 0xc8,
	0xcf, 0xa5, 0xbe, 0x81, 0x33, 0x80, 0xe1, 0x77, 0xe8, 0xef, 0x30, 0x4a, 0x52, 0xf5, 0x7f, 0xa6,
	0xdc, 0x43, 0x68, 0x1f, 0x09, 0x3a, 0xeb, 0x40, 0xa7, 0xd1, 0x81, 0xc3, 0x75, 0x58, 0xd9, 0xcf,
	0x26, 0x51, 0x24, 0x88, 0x94, 0x7f, 0x4b, 0xfa, 0x56, 0xf2, 0x14, 0x7a, 0xbb, 0xa9, 0xfc, 0x58,
	0x36, 0xe3, 0xc5, 0x8c, 0x67, 0xd0, 0xdf, 0x4b, 0x30, 0x65, 0x17, 0x62, 0xac, 0x6a, 0xda, 0xd5,
	0x8d, 0xf8, 0xe2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xef, 0xc9, 0xd0, 0x91, 0x07, 0x00,
	0x00,
}
