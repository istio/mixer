// Copyright 2017 the Istio Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pkg.aspect.config;

import "gogoproto/gogo.proto";

option go_package="config";
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// Configures a metric aspect.
message MetricsParams {
    // Describes how attributes must be evaluated to produce values for the named metric. Suppose the following
    // MetricDescriptor exists in the global configuration:
    //
    //    metric_descriptor:
    //      name: "response_code"
    //      kind: COUNTER
    //      value: I64
    //      labels:
    //        name: api_method
    //        value_type: STRING
    //      labels:
    //        name: response_code
    //        value_type: I64
    //
    // To actually report metrics at run time a mapping from attributes to a metric's labels must be provided in
    // the form of a metric:
    //
    //    metric:
    //      descriptor_name: "response_code" # must match metric_descriptor.name
    //      value: $requestCount        # Istio expression syntax for the attribute named "requestCount"
    //      labels:
    //        # either the attribute named 'apiMethod' or the literal string 'unknown'; must eval to a string
    //        api_method: $apiMethod | "unknown"
    //        # either the attribute named 'responseCode' or the literal int64 500; must eval to an int64
    //        response_code: $responseCode | 500
    message Metric {
        // Must match the name of some metric_descriptor in the global config.
        string descriptor_name = 1;

        // Attribute expression to evaluate to determine the value for this metric;
        // the result of the evaluation must match the value ValueType of the metric_descriptor.
        string value = 2;

        // Map of metric_descriptor label name to attribute expression. At run time each
        // expression will be evaluated to determine the value provided to the aspect. The
        // result of evaluating the expression must match the ValueType of the label in the metric_descriptor.
        map<string, string> labels = 3;
    }

    // The set of metrics that will be populated and handed to aspects at run time.
    repeated Metric metrics = 1;
}
