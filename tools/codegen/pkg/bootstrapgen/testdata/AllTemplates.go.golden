// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package template

import (
	"fmt"

	"github.com/golang/glog"
	"github.com/golang/protobuf/proto"
	rpc "github.com/googleapis/googleapis/google/rpc"
	"github.com/hashicorp/go-multierror"

	"istio.io/api/mixer/v1/config/descriptor"
	"istio.io/mixer/pkg/adapter"
	adptTmpl "istio.io/mixer/pkg/adapter/template"
	"istio.io/mixer/pkg/attribute"
	"istio.io/mixer/pkg/expr"
	"istio.io/mixer/pkg/status"

	"istio.io/mixer/template/list"

	"istio.io/mixer/template/log"

	"istio.io/mixer/template/metric"

	"istio.io/mixer/template/quota"
)

var (
	SupportedTmplInfo = map[string]Info{

		istio_mixer_template_list.TemplateName: {
			CtrCfg:    &istio_mixer_template_list.InstanceParam{},
			Variety:   adptTmpl.TEMPLATE_VARIETY_CHECK,
			BldrName:  "istio.io/mixer/template/list.ListProcessorBuilder",
			HndlrName: "istio.io/mixer/template/list.ListProcessor",
			SupportsTemplate: func(hndlrBuilder adapter.HandlerBuilder) bool {
				_, ok := hndlrBuilder.(istio_mixer_template_list.ListProcessorBuilder)
				return ok
			},
			HandlerSupportsTemplate: func(hndlr adapter.Handler) bool {
				_, ok := hndlr.(istio_mixer_template_list.ListProcessor)
				return ok
			},
			InferType: func(cp proto.Message, tEvalFn TypeEvalFn) (proto.Message, error) {
				var err error = nil
				cpb := cp.(*istio_mixer_template_list.InstanceParam)
				infrdType := &istio_mixer_template_list.Type{}

				infrdType.CheckExpression = istio_mixer_v1_config_descriptor.STRING

				_ = cpb
				return infrdType, err
			},
			ConfigureType: func(types map[string]proto.Message, builder *adapter.HandlerBuilder) error {
				// Mixer framework should have ensured the type safety.
				castedBuilder := (*builder).(istio_mixer_template_list.ListProcessorBuilder)
				castedTypes := make(map[string]*istio_mixer_template_list.Type)
				for k, v := range types {
					// Mixer framework should have ensured the type safety.
					v1 := v.(*istio_mixer_template_list.Type)
					castedTypes[k] = v1
				}
				return castedBuilder.ConfigureList(castedTypes)
			},

			ProcessCheck: func(insts map[string]proto.Message, attrs attribute.Bag, mapper expr.Evaluator,
				handler adapter.Handler) (rpc.Status, adapter.CacheabilityInfo) {
				var found bool
				var err error

				var instances []*istio_mixer_template_list.Instance
				castedInsts := make(map[string]*istio_mixer_template_list.InstanceParam)
				for k, v := range insts {
					v1 := v.(*istio_mixer_template_list.InstanceParam)
					castedInsts[k] = v1
				}
				for name, md := range castedInsts {

					CheckExpression, err := mapper.Eval(md.CheckExpression, attrs)

					if err != nil {
						return status.WithError(err), adapter.CacheabilityInfo{}
					}

					instances = append(instances, &istio_mixer_template_list.Instance{
						Name: name,

						CheckExpression: CheckExpression.(string),
					})
				}
				var cacheInfo adapter.CacheabilityInfo
				if found, cacheInfo, err = handler.(istio_mixer_template_list.ListProcessor).CheckList(instances); err != nil {
					return status.WithError(err), adapter.CacheabilityInfo{}
				}

				if found {
					return status.OK, cacheInfo
				}

				return status.WithPermissionDenied(fmt.Sprintf("%s rejected", instances)), adapter.CacheabilityInfo{}
			},
			ProcessReport: nil,
			ProcessQuota:  nil,
		},

		istio_mixer_template_log.TemplateName: {
			CtrCfg:    &istio_mixer_template_log.InstanceParam{},
			Variety:   adptTmpl.TEMPLATE_VARIETY_REPORT,
			BldrName:  "istio.io/mixer/template/log.LogProcessorBuilder",
			HndlrName: "istio.io/mixer/template/log.LogProcessor",
			SupportsTemplate: func(hndlrBuilder adapter.HandlerBuilder) bool {
				_, ok := hndlrBuilder.(istio_mixer_template_log.LogProcessorBuilder)
				return ok
			},
			HandlerSupportsTemplate: func(hndlr adapter.Handler) bool {
				_, ok := hndlr.(istio_mixer_template_log.LogProcessor)
				return ok
			},
			InferType: func(cp proto.Message, tEvalFn TypeEvalFn) (proto.Message, error) {
				var err error = nil
				cpb := cp.(*istio_mixer_template_log.InstanceParam)
				infrdType := &istio_mixer_template_log.Type{}

				infrdType.Dimensions = make(map[string]istio_mixer_v1_config_descriptor.ValueType)
				for k, v := range cpb.Dimensions {
					if infrdType.Dimensions[k], err = tEvalFn(v); err != nil {
						return nil, err
					}
				}

				_ = cpb
				return infrdType, err
			},
			ConfigureType: func(types map[string]proto.Message, builder *adapter.HandlerBuilder) error {
				// Mixer framework should have ensured the type safety.
				castedBuilder := (*builder).(istio_mixer_template_log.LogProcessorBuilder)
				castedTypes := make(map[string]*istio_mixer_template_log.Type)
				for k, v := range types {
					// Mixer framework should have ensured the type safety.
					v1 := v.(*istio_mixer_template_log.Type)
					castedTypes[k] = v1
				}
				return castedBuilder.ConfigureLog(castedTypes)
			},

			ProcessReport: func(insts map[string]proto.Message, attrs attribute.Bag, mapper expr.Evaluator, handler adapter.Handler) rpc.Status {
				result := &multierror.Error{}
				var instances []*istio_mixer_template_log.Instance

				castedInsts := make(map[string]*istio_mixer_template_log.InstanceParam)
				for k, v := range insts {
					v1 := v.(*istio_mixer_template_log.InstanceParam)
					castedInsts[k] = v1
				}
				for name, md := range castedInsts {

					Dimensions, err := evalAll(md.Dimensions, attrs, mapper)

					if err != nil {
						result = multierror.Append(result, fmt.Errorf("failed to eval Dimensions for instance '%s': %v", name, err))
						continue
					}

					instances = append(instances, &istio_mixer_template_log.Instance{
						Name: name,

						Dimensions: Dimensions,
					})
				}

				if err := handler.(istio_mixer_template_log.LogProcessor).ReportLog(instances); err != nil {
					result = multierror.Append(result, fmt.Errorf("failed to report all values: %v", err))
				}

				err := result.ErrorOrNil()
				if err != nil {
					return status.WithError(err)
				}

				return status.OK
			},
			ProcessCheck: nil,
			ProcessQuota: nil,
		},

		istio_mixer_template_metric.TemplateName: {
			CtrCfg:    &istio_mixer_template_metric.InstanceParam{},
			Variety:   adptTmpl.TEMPLATE_VARIETY_REPORT,
			BldrName:  "istio.io/mixer/template/metric.MetricProcessorBuilder",
			HndlrName: "istio.io/mixer/template/metric.MetricProcessor",
			SupportsTemplate: func(hndlrBuilder adapter.HandlerBuilder) bool {
				_, ok := hndlrBuilder.(istio_mixer_template_metric.MetricProcessorBuilder)
				return ok
			},
			HandlerSupportsTemplate: func(hndlr adapter.Handler) bool {
				_, ok := hndlr.(istio_mixer_template_metric.MetricProcessor)
				return ok
			},
			InferType: func(cp proto.Message, tEvalFn TypeEvalFn) (proto.Message, error) {
				var err error = nil
				cpb := cp.(*istio_mixer_template_metric.InstanceParam)
				infrdType := &istio_mixer_template_metric.Type{}

				if infrdType.Value, err = tEvalFn(cpb.Value); err != nil {
					return nil, err
				}

				infrdType.Dimensions = make(map[string]istio_mixer_v1_config_descriptor.ValueType)
				for k, v := range cpb.Dimensions {
					if infrdType.Dimensions[k], err = tEvalFn(v); err != nil {
						return nil, err
					}
				}

				_ = cpb
				return infrdType, err
			},
			ConfigureType: func(types map[string]proto.Message, builder *adapter.HandlerBuilder) error {
				// Mixer framework should have ensured the type safety.
				castedBuilder := (*builder).(istio_mixer_template_metric.MetricProcessorBuilder)
				castedTypes := make(map[string]*istio_mixer_template_metric.Type)
				for k, v := range types {
					// Mixer framework should have ensured the type safety.
					v1 := v.(*istio_mixer_template_metric.Type)
					castedTypes[k] = v1
				}
				return castedBuilder.ConfigureMetric(castedTypes)
			},

			ProcessReport: func(insts map[string]proto.Message, attrs attribute.Bag, mapper expr.Evaluator, handler adapter.Handler) rpc.Status {
				result := &multierror.Error{}
				var instances []*istio_mixer_template_metric.Instance

				castedInsts := make(map[string]*istio_mixer_template_metric.InstanceParam)
				for k, v := range insts {
					v1 := v.(*istio_mixer_template_metric.InstanceParam)
					castedInsts[k] = v1
				}
				for name, md := range castedInsts {

					Value, err := mapper.Eval(md.Value, attrs)

					if err != nil {
						result = multierror.Append(result, fmt.Errorf("failed to eval Value for instance '%s': %v", name, err))
						continue
					}

					Dimensions, err := evalAll(md.Dimensions, attrs, mapper)

					if err != nil {
						result = multierror.Append(result, fmt.Errorf("failed to eval Dimensions for instance '%s': %v", name, err))
						continue
					}

					instances = append(instances, &istio_mixer_template_metric.Instance{
						Name: name,

						Value: Value,

						Dimensions: Dimensions,
					})
				}

				if err := handler.(istio_mixer_template_metric.MetricProcessor).ReportMetric(instances); err != nil {
					result = multierror.Append(result, fmt.Errorf("failed to report all values: %v", err))
				}

				err := result.ErrorOrNil()
				if err != nil {
					return status.WithError(err)
				}

				return status.OK
			},
			ProcessCheck: nil,
			ProcessQuota: nil,
		},

		istio_mixer_template_quota.TemplateName: {
			CtrCfg:    &istio_mixer_template_quota.InstanceParam{},
			Variety:   adptTmpl.TEMPLATE_VARIETY_REPORT,
			BldrName:  "istio.io/mixer/template/quota.QuotaProcessorBuilder",
			HndlrName: "istio.io/mixer/template/quota.QuotaProcessor",
			SupportsTemplate: func(hndlrBuilder adapter.HandlerBuilder) bool {
				_, ok := hndlrBuilder.(istio_mixer_template_quota.QuotaProcessorBuilder)
				return ok
			},
			HandlerSupportsTemplate: func(hndlr adapter.Handler) bool {
				_, ok := hndlr.(istio_mixer_template_quota.QuotaProcessor)
				return ok
			},
			InferType: func(cp proto.Message, tEvalFn TypeEvalFn) (proto.Message, error) {
				var err error = nil
				cpb := cp.(*istio_mixer_template_quota.InstanceParam)
				infrdType := &istio_mixer_template_quota.Type{}

				infrdType.Dimensions = make(map[string]istio_mixer_v1_config_descriptor.ValueType)
				for k, v := range cpb.Dimensions {
					if infrdType.Dimensions[k], err = tEvalFn(v); err != nil {
						return nil, err
					}
				}

				_ = cpb
				return infrdType, err
			},
			ConfigureType: func(types map[string]proto.Message, builder *adapter.HandlerBuilder) error {
				// Mixer framework should have ensured the type safety.
				castedBuilder := (*builder).(istio_mixer_template_quota.QuotaProcessorBuilder)
				castedTypes := make(map[string]*istio_mixer_template_quota.Type)
				for k, v := range types {
					// Mixer framework should have ensured the type safety.
					v1 := v.(*istio_mixer_template_quota.Type)
					castedTypes[k] = v1
				}
				return castedBuilder.ConfigureQuota(castedTypes)
			},

			ProcessReport: func(insts map[string]proto.Message, attrs attribute.Bag, mapper expr.Evaluator, handler adapter.Handler) rpc.Status {
				result := &multierror.Error{}
				var instances []*istio_mixer_template_quota.Instance

				castedInsts := make(map[string]*istio_mixer_template_quota.InstanceParam)
				for k, v := range insts {
					v1 := v.(*istio_mixer_template_quota.InstanceParam)
					castedInsts[k] = v1
				}
				for name, md := range castedInsts {

					Dimensions, err := evalAll(md.Dimensions, attrs, mapper)

					if err != nil {
						result = multierror.Append(result, fmt.Errorf("failed to eval Dimensions for instance '%s': %v", name, err))
						continue
					}

					instances = append(instances, &istio_mixer_template_quota.Instance{
						Name: name,

						Dimensions: Dimensions,
					})
				}

				if err := handler.(istio_mixer_template_quota.QuotaProcessor).ReportQuota(instances); err != nil {
					result = multierror.Append(result, fmt.Errorf("failed to report all values: %v", err))
				}

				err := result.ErrorOrNil()
				if err != nil {
					return status.WithError(err)
				}

				return status.OK
			},
			ProcessCheck: nil,
			ProcessQuota: nil,
		},
	}
)
