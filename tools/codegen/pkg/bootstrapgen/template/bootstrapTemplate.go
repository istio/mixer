// Copyright 2016 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package template

// InterfaceTemplate defines the template used to generate the adapter
// interfaces for Mixer for a given aspect.
var InterfaceTemplate = `// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

package template

import (
    "github.com/golang/protobuf/proto"
	"istio.io/api/mixer/v1/config/descriptor"
	adptConfig "istio.io/mixer/pkg/adapter/config"
    {{range .}}
		"{{.PackageImportPath}}"
	{{end}}
)

var (
	SupportedTmplInfo = map[string]Info {
	{{range .}}
		{{.GoPackageName}}.TemplateName: {
		    CtrCfg:  &{{.GoPackageName}}.ConstructorParam{},
		    BldrName:  "{{.PackageImportPath}}.{{.Name}}ProcessorBuilder",
			SupportsTemplate: func(hndlrBuilder adptConfig.HandlerBuilder) bool {
	            _, ok := hndlrBuilder.({{.GoPackageName}}.{{.Name}}ProcessorBuilder)
	            return ok
            },
	        InferType: func(cp proto.Message, tEvalFn TypeEvalFn) (proto.Message, error) {
	            var err error = nil
	            cpb := cp.(*{{.GoPackageName}}.ConstructorParam)
			    infrdType := &{{.GoPackageName}}.Type{}

                {{range .TemplateMessage.Fields}}
                    {{if isPrimitiveValueType .GoType}}
	            	    infrdType.{{.GoName}} = {{primitiveToValueType .GoType}}
	            	{{end}}
                    {{if isValueType .GoType}}
	                    if infrdType.{{.GoName}}, err = tEvalFn(cpb.{{.GoName}}); err != nil {
	                    	return nil, err
	                    }
	            	{{end}}
                    {{if isStringValueTypeMap .GoType}}
	                    infrdType.{{.GoName}} = make(map[string]istio_mixer_v1_config_descriptor.ValueType)
	                    for k, v := range cpb.{{.GoName}} {
	                    	if infrdType.{{.GoName}}[k], err = tEvalFn(v); err != nil {
	                    		return nil, err
	                    	}
	                    }
	            	{{end}}
	            {{end}}
                _ = cpb
	            return infrdType, err
            },
			ConfigureType: func(types map[string]proto.Message, builder *adptConfig.HandlerBuilder) error {
	            // Mixer framework should have ensured the type safety.
	            castedBuilder := (*builder).({{.GoPackageName}}.{{.Name}}ProcessorBuilder)
	            castedTypes := make(map[string]*{{.GoPackageName}}.Type)
	            for k, v := range types {
		            // Mixer framework should have ensured the type safety.
		            v1 := v.(*{{.GoPackageName}}.Type)
		            castedTypes[k] = v1
	            }
	            return castedBuilder.Configure{{.Name}}(castedTypes)
            },
		},
	{{end}}
	}
)
{{range .}}
{{end}}

`
